color = "Duration of mission")
ggplot(paulist_missions, aes(x = decade, y = converts, color = state, size = duration_days)) +
geom_point(alpha = 6.5, shape = 1) +
labs(title = "Paulist missions", subtitle = "created by Aslisho", x = "decades", y ="Converts to Roman Catholicism", color = "order", size = "Duration (days)", tag ="Plot 1", caption = "This plot is jsut for expiementing with R")
ggplot(paulist_missions, aes(x = converts, color = converts)) +
geom_histogram() + labs (x ="Converts", y = "number of converts")
ggplot(paulist_missions, aes(x = confessions, color = converts)) +
geom_histogram(bins = 300, binwidth = 100, color = "red") + labs (x ="Confessions", y = "number of confessions")
ggplot(paulists_by_year, aes(x = year, y = converts)) +
geom_line()
ggplot(paulists_by_year, aes(x = year, y = confessions), color = "decades") +
geom_line(colour="red", size =1)# +
#geom_point(colour ="green", size =2)
ggplot(paulists_by_year, aes(x = year), colour = decades) +
geom_line(aes(y = confessions), colour="red", size =0.5) +
geom_point(aes(y =confessions), colour ="green", size =1)+
geom_line(aes(y = converts*100), size = 1)
ggplot(paulists_by_year, aes(x = year)) +
geom_line(aes(y = converts/confessions), colour="green", size =0.5)
ggplot(paulists_by_year, aes(x = year), colour = decades) +
geom_col(aes(y = confessions), size =0.5) +
geom_line(aes(y =converts*300), colour ="green", size =1)
# not sure the multiplication of the data for visualisation is the right solution. will see.
#nlai <- read.csv("/Users/aslisho/Documents/Post-Doc/Data Science/R/NLAI dataset/all_meta_combined_edited_CSVEditor.csv", header = TRUE, sep ="\t")
#subject <- nlai$subject
#date <-nlai$date
#ggplot(nlai, aes(x = date, y = subject), color = subject, na.rm = TRUE) +
# geom_col()
selection_nlai <- nlai %>%
select(subject,  date, author, collection)%>%
group_by(collection)
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = country ))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = iflse(country!="China", country ))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = iflse(pop < 500000000, country, NA))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = ifelse(pop < 500000000, country, NA))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = ifelse(pop < 50000000, country, NA))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = ifelse(pop < 50000000, country, NA)))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = ifelse(pop < 500000000, country, NA)))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = country))
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_point() +
geom_text_repel(aes(label = country))+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop, colour =country) +
geom_point() +
geom_text_repel(aes(label = country))+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop), colour =country +
geom_point() +
geom_text_repel(aes(label = country))+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop), colour =country) +
geom_point() +
geom_text_repel(aes(label = country))+
facet_wrap(~continent)
install.packages("gapminder")
{r}
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop), colour =country) +
geom_bar(fill = "country")+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop), colour =country) +
geom_bar(fill = country)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop) +
geom_bar(fill = country)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_bar(fill = country)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_bar()+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes(x = year, y = pop)) +
geom_bar(x=state)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes( y = pop)) +
geom_bar(x=state)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
#head(gapminder)
ggplot(gapminder, aes( y = pop) +
geom_bar(x=state)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
ggplot(gapminder, aes(x = year), colour = continent) +
geom_col(aes(y = gdp), size =0.5) +
geom_line(aes(y =population/10000), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
ggplot(gapminder, aes(x = year), colour = continent) +
geom_col(aes(y = gdpPercap), size =0.5) +
geom_line(aes(y =population/10000), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
ggplot(gapminder, aes(x = year), colour = continent) +
geom_col(aes(y = gdpPercap), size =0.5) +
geom_line(aes(y =pop/10000), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
ggplot(gapminder, aes(x = year), colour = continent) +
geom_col(aes(y = pop), size =1.5) +
geom_line(aes(y =pop/10000), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
ggplot(gapminder, aes(x = year), colour = country) +
geom_col(aes(y = pop), size =1.5) +
geom_line(aes(y =pop/10000), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly ->gapminder %>%
filter(continent=Asia)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly <- gapminder %>%
filter(continent=Asia)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly <- gapminder %>%
filter(continent=Asia)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly <- gapminder %>%
filter(continent==Asia)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly <- gapminder %>%
filter(continent= "Asia")
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly <- gapminder %>%
filter(continent == Asia)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly <- gapminder %>%
filter(year = 1952)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
AsiaOnly <- gapminder %>%
filter(year == 1952)
ggplot(AsiaOnly, aes(x = year), colour = country) +
geom_col(aes(y = pop), size =1.5) +
geom_line(aes(y =pop/10000), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gaminder %>%
mutate(bigGdp = ifelse(gdpPercap > 50000, country, NA))
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(bigGdp = ifelse(gdpPercap > 50000, country, NA))
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(bigGdp = ifelse(gdpPercap > 50000, country, NA))
gapminder_big_countries
install.packages("gapminder")
?sort
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(bigGdp = ifelse(gdpPercap > 50000, country, NA))%>%
sort(decreasing = TRUE)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(bigGdp = ifelse(gdpPercap > 5000, country, NA))
gapminder_big_countries
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(label =ifelse(gdpPercap > 5000, country, NA))
gapminder_big_countries
install.packages("gapminder")
mn_missions_with_labels <- paulist_missions %>%
filter(state == "MN", converts > 0) %>%
mutate(label = ifelse(converts > 5, city, NA))
mn_missions_with_labels
?fctr
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
gapminder_big_countries
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
#gapminder_big_countries
ggplot(gapminder_big_countries, aes(x = year), colour = country) +
geom_col(aes(y = confessions), size =0.5) +
geom_line(aes(y =converts*300), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
#gapminder_big_countries
ggplot(gapminder_big_countries, aes(x = year), colour = country) +
geom_col(aes(y = pop), size =0.5) +
geom_line(aes(y =pop/100000), colour ="green", size =1)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
#gapminder_big_countries
ggplot(gapminder_big_countries, aes(x = year), colour = country) +
geom_col(aes(y = pop), size =0.5) +
geom_line(aes(y =pop/100000), colour ="green", size =1)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
filter(year == 2000)%>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
#gapminder_big_countries
ggplot(gapminder_big_countries, aes(x = year), colour = country) +
geom_col(aes(y = pop), size =0.5) +
geom_line(aes(y =pop/100000), colour ="green", size =1)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
filter(year = 2000)%>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
filter(year == 1952)%>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
#gapminder_big_countries
ggplot(gapminder_big_countries, aes(x = year), colour = country) +
geom_col(aes(y = pop), size =0.5) +
geom_line(aes(y =pop/100000), colour ="green", size =1)+
facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
filter(year == 1952)%>%
mutate(label =ifelse(gdpPercap > 5000, lifeExp, NA))
ggplot(gapminder_big_countries, aes(x = year, y = pop, color = country)) +
geom_point()
install.packages("gapminder")
#gapminder_big_countries
#ggplot(gapminder_big_countries, aes(x = year), colour = country) +
#geom_col(aes(y = pop), size =0.5) +
#geom_line(aes(y =pop/100000), colour ="green", size =1)+
#facet_wrap(~continent)
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
filter(year == 1952)%>%
mutate(label =ifelse(pop > 50000000, lifeExp, NA))
ggplot(gapminder_big_countries, aes(x = year, y = pop, color = continent)) +
geom_point()
#gapminder_big_countries
#ggplot(gapminder_big_countries, aes(x = year), colour = country) +
#geom_col(aes(y = pop), size =0.5) +
#geom_line(aes(y =pop/100000), colour ="green", size =1)+
#facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
#filter(year == 1952)%>%
mutate(label =ifelse(pop > 50000000, lifeExp, NA))
ggplot(gapminder_big_countries, aes(x = year, y = pop, color = continent)) +
geom_point()
#gapminder_big_countries
#ggplot(gapminder_big_countries, aes(x = year), colour = country) +
#geom_col(aes(y = pop), size =0.5) +
#geom_line(aes(y =pop/100000), colour ="green", size =1)+
#facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
#filter(year == 1952)%>%
mutate(label =ifelse(pop < 500000000, lifeExp, NA))
ggplot(gapminder_big_countries, aes(x = year, y = pop, color = continent)) +
geom_line()
#gapminder_big_countries
#ggplot(gapminder_big_countries, aes(x = year), colour = country) +
#geom_col(aes(y = pop), size =0.5) +
#geom_line(aes(y =pop/100000), colour ="green", size =1)+
#facet_wrap(~continent)
install.packages("gapminder")
install.packages("gapminder")
head(gapminder)
gapminder_big_countries <- gapminder %>%
#filter(year == 1952)%>%
mutate(label =ifelse(pop < 500000000, lifeExp, NA))
ggplot(gapminder_big_countries, aes(x = year, y = pop/10000, color = continent)) +
geom_line()
#gapminder_big_countries
#ggplot(gapminder_big_countries, aes(x = year), colour = country) +
#geom_col(aes(y = pop), size =0.5) +
#geom_line(aes(y =pop/100000), colour ="green", size =1)+
#facet_wrap(~continent)
install.packages("gapminder")
file_list = list.files(pattern="*.yml")
data_list <- vector("list", "length" = length(file.list))
knitr::opts_chunk$set(echo = TRUE)
pathToFiles = "/Users/aslisho/Documents/Post-Doc/Data Science/R/R Course with MaximRomanov/TextAnalysis/"
d1862 <- read.delim(paste0(pathToFiles, "dispatch_1862.tsv"), encoding="UTF-8", header=TRUE, quote="")
sw1 <- scan(paste0(pathToFiles, "sw1.md"), what="character", sep="\n")
#d1862
#sw1
#This initially didn't work but finally worked after I have restarted R and the ccomputer. Now I can load thwe files using paste0
# Alternative solution for loading the dispatch file:
#dispatch <- read.csv(file = "/Users/aslisho/Documents/Post-Doc/Data Science/R/R Course with MaximRomanov/TextAnalysis/dispatch_1862.tsv", sep = '\t', header = TRUE)
#dispatch
#starWars <- scan("sw1.md", what="character", sep="\n")
#sw1
library(tidytext)
pathToFiles = "/Users/aslisho/Documents/Post-Doc/Data Science/R/R Course with MaximRomanov/TextAnalysis/"
d1862 <- read.delim(paste0(pathToFiles, "dispatch_1862.tsv"), encoding="UTF-8", header=TRUE, quote="")
sw1 <- scan(paste0(pathToFiles, "sw1.md"), what="character", sep="\n")
#d1862
knitr::kable(head(d1862))
d1862 %>%
count(type, sort=T)
death_d1862 <- d1862 %>%
filter(type=="death" | type == "died")
death_d1862
articles_d1862 <- d1862 %>%
filter(type == "article"| type == "acticle"| type == "aritcle"| type == "artcle"| type == "articl" | type == "articler"|type == "aticle")
articles_d1862
commercial_d1862 <- d1862 %>%
filter(type == "ad-blank" | type == "orders"| type == "advert" |type == "adverts" | type == "ordered" |type == "oders" )
commercial_d1862
notices_d1862 <- d1862 %>%
filter(type == "married"| type == "married,"| type == "marry"| type == "notice"|type ==  "runaway"|type == "ranaway"| type == "Wanted"|type == "printrun"|type == "25")
literary_d1862 <-d1862 %>%
filter(type =="poem"|type == "letter"|type == "entry"|type == "oped"|type == "simple")
literary_d1862
test_set <- death_d1862
test_set_tidy <- test_set %>%
mutate(item_number = cumsum(str_detect(text, regex("^", ignore_case = TRUE)))) %>%
select(-type) %>%
unnest_tokens(word, text) %>%
mutate(word_number = row_number())
knitr::opts_chunk$set(echo = TRUE)
# Euclidian distance
# shared vector space
it1 = itoken(as.vector(example1$text))
t_jaccard_sim_df_subset <- jaccard_sim_df %>%
filter(jaccardSimilarity > 0.49) %>%
filter(jaccardSimilarity <= 0.9) %>%
arrange(desc(jaccardSimilarity), .by_group=T)
library(pdftools)
library(tidyverse)
library(tesseract)
library(readr)
text <- tesseract::ocr(".\morris", engine = tesseract("eng"))
readr::write_lines(text, str_replace(pathToPNGfile, ".png", ".txt"))
#for tibble we must construct vectors of simialr size, so the sequance must correspond top the period vector.
# This can get complicated with long seq such as years, in which case we get rid of the period vector and use conditional
long_years <- seq(800, 1800, 1)
periodsNew <- tibble(long_years)
periodsNew %>%
mutate(periodsNewcolumn= ifelse(long_years >= 800 & long_years < 900, "9th century",
ifelse(long_years >= 900 & long_years < 1000, "10th century",
ifelse(long_years >= 1000 & long_years < 1100, "11th century", "eleventh-nineteenth centuries"))))
#for tibble we must construct vectors of simialr size, so the sequance must correspond top the period vector.
# This can get complicated with long seq such as years, in which case we get rid of the period vector and use conditional
long_years <- seq(800, 1800, 1)
periodsNew <- tibble(long_years)
periodsNew %>%
mutate(periodsNewcolumn= ifelse(long_years >= 800 & long_years < 900, "9th century",
ifelse(long_years >= 900 & long_years < 1000, "10th century",
ifelse(long_years >= 1000 & long_years < 1100, "11th century", "eleventh-nineteenth centuries"))))
str(periods)
#for tibble we must construct vectors of simialr size, so the sequance must correspond top the period vector.
# This can get complicated with long seq such as years, in which case we get rid of the period vector and use conditional
long_years <- seq(800, 1800, 1)
periodsNew <- tibble(long_years)
periodsNew %>%
mutate(periodsNewcolumn= ifelse(long_years >= 800 & long_years < 900, "9th century",
ifelse(long_years >= 900 & long_years < 1000, "10th century",
ifelse(long_years >= 1000 & long_years < 1100, "11th century", "eleventh-nineteenth centuries"))))
str(periodsNew)
#for tibble we must construct vectors of simialr size, so the sequance must correspond top the period vector.
# This can get complicated with long seq such as years, in which case we get rid of the period vector and use conditional
long_years <- seq(800, 1800, 1)
periodsNew <- tibble(long_years)
periodsNew %>%
mutate(periodsNewcolumn= ifelse(long_years >= 800 & long_years < 900, "9th century",
ifelse(long_years >= 900 & long_years < 1000, "10th century",
ifelse(long_years >= 1000 & long_years < 1100, "11th century", "eleventh-nineteenth centuries"))))
str(long_years)
#for tibble we must construct vectors of simialr size, so the sequance must correspond top the period vector.
# This can get complicated with long seq such as years, in which case we get rid of the period vector and use conditional
long_years <- seq(800, 1800, 1)
periodsNew <- tibble(long_years)
periodsNew %>%
mutate(periodsNewcolumn= ifelse(long_years >= 800 & long_years < 900, "9th century",
ifelse(long_years >= 900 & long_years < 1000, "10th century",
ifelse(long_years >= 1000 & long_years < 1100, "11th century", "eleventh-nineteenth centuries"))))
>swirl
?swirl
??swirl
install.packages("swirl")
?swirl
??swirl
swirl()
library(swirl)
swirl()
sirl9)
swirl()
#for tibble we must construct vectors of simialr size, so the sequance must correspond top the period vector.
# This can get complicated with long seq such as years, in which case we get rid of the period vector and use conditional
long_years <- seq(800, 1800, 1)
periodsNew <- tibble(long_years)
shiny::runApp('~/Documents/Post-Doc/Data Science/R/_OpenITI_NgramReader_ZENODO/OpenITI_NgramReader_FULL')
shiny::runApp('~/Documents/Post-Doc/Data Science/R/_OpenITI_NgramReader_ZENODO/OpenITI_NgramReader_FULL')
